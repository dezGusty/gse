use diesel::prelude::*;
use serde_derive::{Deserialize, Serialize};

use crate::schema::players;

// use super::schema::players;
use super::schema::players::dsl::players as all_players;

#[derive(Queryable, Debug, Serialize, Deserialize)]
pub struct Player {
    pub id: i32,
    pub name: String,
    pub display_name: String,
    pub rating: f64,
}

#[derive(Deserialize)] 
pub struct PlayerData {
    pub name: String,
}

// this is to insert users to database
#[derive(Serialize, Deserialize, Insertable)]
#[table_name = "players"]
pub struct NewPlayer {
    pub name: String,
    pub display_name: String,
    pub rating: f64,
}

impl Player {
    pub fn get_all_players(conn: &SqliteConnection) -> Vec<Player> {
        all_players
            .order(players::id.desc())
            .load::<Player>(conn)
            .expect("error!")
    }

    // pub fn insert_user(player: NewPlayer, conn: &SqliteConnection) -> bool {
    //     diesel::insert_into(users::table)
    //         .values(&user)
    //         .execute(conn)
    //         .is_ok()
    // }

    // pub fn get_user_by_username(player: PlayerData, conn: &SqliteConnection) -> Vec<Player> {
    //     all_players
    //         .filter(players::name.eq(player.name))
    //         .load::<Player>(conn)
    //         .expect("error!")
    // }
}
